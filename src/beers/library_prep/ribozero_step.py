import sys
import re
from timeit import default_timer as timer
import numpy as np
import scipy.signal
from beers_utils.molecule import Molecule

class RiboZeroStep:
    """
    This step simulates the RiboZero procedure, which uses a library of oligos to deplete the ribosomal rRNA
    content of the sample.

    The library of oligos is sourced from:
        Adiconis, X., Borges-Rivera, D., Satija, R. et al.
        Comparative analysis of RNA sequencing methods for degraded or low-input samples.
        Nat Methods 10, 623-629 (2013). https://doi.org/10.1038/nmeth.2483

    Configuration Example::

        # Maximum chance to degrade a molecule that matches one of the oligos
        max_degrade_chance: 0.99

        # Exponent to raise the score to to determine the chance of degradation
        # Exponent of 1 means that a 50% match has a 50% probability of degraded
        # exponent of 2 means a 50% match has a 25% probability of degrade, etc.
        # Note that 50% matches happen somewhat regularly and 25% match happens ubiquitously
        # and this probability is per-base, so the exponent should not be low
        degrade_exponent: 6


        # If true, degrade/remove the entire molecule if any part matches
        # otherwise, fragments the molecule around the match and removes
        # the matching segment.
        degrade_entire_molecule: False
    """

    name = "RiboZero Step"

    def __init__(self, parameters, global_config):
        self.max_degrade_chance = parameters["max_degrade_chance"]
        self.degrade_exponent = parameters["degrade_exponent"]
        self.degrade_entire_molecule = parameters["degrade_entire_molecule"]
        self.global_config = global_config
        print("RiboZero selection step instantiated")

        # The regular expression that matches to any of the oligos
        # in the oligo library. Looks for exact matches only
        self.oligo_match_re = re.compile("|".join(OLIGO_LIBRARY))

    def execute(self, molecule_packet, rng, log):
        print("RiboZero selection step starting")
        retained_molecules = []
        for molecule in molecule_packet.molecules:
            # Check if any of the oligo sequences are present in the molecule
            scores = ungapped_alignment_scores(ENCODED_OLIGO_LIBRARY, molecule.sequence)
            degrade_probability = self.max_degrade_chance * (scores / OLIGO_LENGTH) ** self.degrade_exponent
            to_degrade = rng.random(size=degrade_probability.shape) <= degrade_probability
            degrade_sites, = np.where(to_degrade)

            times_degraded = 0
            remaining_molecule = molecule
            last_end = 1
            for site in degrade_sites:
                if site < last_end:
                    continue

                times_degraded += 1

                if self.degrade_entire_molecule:
                    # Don't retain any of the molecule
                    continue

                # Retain the piece between the end of the last fragment and this oligo match
                new_mol = molecule.make_fragment(last_end, site)
                if len(new_mol.sequence) > 0:
                    retained_molecules.append(new_mol)

                last_end = site + OLIGO_LENGTH
            if times_degraded > 0:
                note = f'degraded {times_degraded} times'

                if not self.degrade_entire_molecule:
                    # Take the piece after the last oligo match
                    new_mol = molecule.make_fragment(last_end, len(molecule.sequence))
                    if len(new_mol.sequence) > 0:
                        retained_molecules.append(new_mol)
            else:
                retained_molecules.append(molecule)
                note = 'retained'
            log.write(molecule, note)
        print("RiboZero selection step complete")
        molecule_packet.molecules = retained_molecules
        return molecule_packet

    @staticmethod
    def validate(parameters, global_config):
        errors = []
        if "max_degrade_chance" in parameters:
            max_degrade_chance = parameters["max_degrade_chance"]
            if max_degrade_chance < 0 or min_retention_prob > 1:
                errors.append("The match degradation chance (max_degrade_chance) must be between 0 and 1")
        else:
            errors.append("Must specify max_degrade_chance (between 0 and 1)")

        if "degrade_exponent" in parameters:
            degrade_exponent = parameters["degrade_exponent"]
            if degrade_exponent < 0 or min_retention_prob > 1:
                errors.append("The match degradation chance (degrade_exponent) must be between 0 and 1")
        else:
            errors.append("Must specify degrade_exponent (between 0 and 1)")

        if "degrade_entire_molecule" in parameters:
            degrade_entire_molecule = parameters["degrade_entire_molecule"]
            if degrade_entire_molecule not in [True, False]:
                errors.append("degrade_entire_molecule must be a boolean value")
        else:
            errors.append("Must specify degrade_entire_molecule (boolean)")

        return errors

ACGT = np.array([ord(x) for x in "ACGT"])
def encode(sequence):
    ''' Maps a sequence (as a string) to a numpy array of shape (4,n)
    which one-hot encodes the A/C/G/T value '''
    encoded = np.frombuffer(sequence.encode("ascii"), dtype='uint8')
    return (ACGT[:,None] == encoded[None,:]).astype(int)
def padded_encode(sequence, length):
    ''' Same as encode(sequence) but if sequence is less than given length
    it is padded with 1/1/1/1 values for ACGT to indicate it matches anything'''
    encoded = encode(sequence)
    return np.concatenate((
            encoded,
            np.full(shape=(4,max(0, length - len(sequence))), fill_value = 1),
        ),
        axis = 1,
    )

def ungapped_alignment_scores(queries, ref):
    ''' Returns the scores at each position of the best ungaped alignment
    of any of the query seqs against the reference sequence '''

    ref = encode(ref)
    # NOTE: sadly scipy.signal.convolve is not vectorized
    # since it will just sum over any additional axes
    scores = np.array([scipy.signal.convolve(
        ref,
        query[::-1, ::-1], # Reversed since convolution will reverse it again
        mode = "valid",
    ) for query in queries])
    return scores.max(axis=(0,1))


OLIGO_LIBRARY = """
TAATGATCCTTCCGCAGGTTCACCTACGGAAACCTTGTTACGACTTTTAC
TTCCTCTAGATAGTCAAGTTCGACCGTCTTCTCAGCGCTCCGCCAGGGCC
GTGGGCCGACCCCGGCGGGGCCGATCCGAGGGCCTCACTAAACCATCCAA
TCGGTAGTAGCGACGGGCGGTGTGTACAAAGGGCAGGGACTTAATCAACG
CAAGCTTATGACCCGCACTTACTCGGGAATTCCCTCGTTCATGGGGAATA
ATTGCAATCCCCGATCCCCATCACGAATGGGGTTCAACGGGTTACCCGCG
CCTGCCGGCGTAGGGTAGGCACACGCTGAGCCAGTCAGTGTAGCGCGCGT
GCAGCCCCGGACATCTAAGGGCATCACAGACCTGTTATTGCTCAATCTCG
GGTGGCTGAACGCCACTTGTCCCTCTAAGAAGTTGGGGGACGCCGACCGC
TCGGGGGTCGCGTAACTAGTTAGCATGCCAGAGTCTCGTTCGTTATCGGA
ATTAACCAGACAAATCGCTCCACCAACTAAGAACGGCCATGCACCACCAC
CCACGGAATCGAGAAAGAGCTATCAATCTGTCAATCCTGTCCGTGTCCGG
GCCGGGTGAGGTTTCCCGTGTTGAGTCAAATTAAGCCGCAGGCTCCACTC
CTGGTGGTGCCCTTCCGTCAATTCCTTTAAGTTTCAGCTTTGCAACCATA
CTCCCCCCGGAACCCAAAGACTTTGGTTTCCCGGAAGCTGCCCGGCGGGT
CATGGGAATAACGCCGCCGCATCGCCGGTCGGCATCGTTTATGGTCGGAA
CTACGACGGTATCTGATCGTCTTCGAACCTCCGACTTTCGTTCTTGATTA
ATGAAAACATTCTTGGCAAATGCTTTCGCTCTGGTCCGTCTTGCGCCGGT
CCAAGAATTTCACCTCTAGCGGCGCAATACGAATGCCCCCGGCCGTCCCT
CTTAATCATGGCCTCAGTTCCGAAAACCAACAAAATAGAACCGCGGTCCT
ATTCCATTATTCCTAGCTGCGGTATCCAGGCGGCTCGGGCCTGCTTTGAA
CACTCTAATTTTTTCAAAGTAAACGCTTCGGGCCCCGCGGGACACTCAGC
TAAGAGCATCGAGGGGGCGCCGAGAGGCAAGGGGCGGGGACGGGCGGTGG
CTCGCCTCGCGGCGGACCGCCCGCCCGCTCCCAAGATCCAACTACGAGCT
TTTTAACTGCAGCAACTTTAATATACGCTATTGGAGCTGGAATTACCGCG
GCTGCTGGCACCAGACTTGCCCTCCAATGGATCCTCGTTAAAGGATTTAA
AGTGGACTCATTCCAATTACAGGGCCTCGAAAGAGTCCTGTATTGTTATT
TTTCGTCACTACCTCCCCGGGTCGGGAGTGGGTAATTTGCGCGCCTGCTG
CCTTCCTTGGATGTGGTAGCCGTTTCTCAGGCTCCCTCTCCGGAATCGAA
CCCTGATTCCCCGTCACCCGTGGTCACCATGGTAGGCACGGCGACTACCA
TCGAAAGTTGATAGGGCAGACGTTCGAATGGGTCGTCGCCGCCACGGG
GCGTGCGATCGGCCCGAGGTTATCTAGAGTCACCAAAGCCGCCGGCGCCC
GCCCCCCGGCCGGGGCCGGAGAGGGGCTGACCGGGTTGGTTTTGATCTGA
TAAATGCACGCATCCCCCCCGCGAAGGGGGTCAGCGCCCGTCGGCATGTA
TTAGCTCTAGAATTACCACAGTTATCCAAGTAGGAGAGGAGCGAGCGACC
AAAGGAACCATAACTGATTTAATGAGCCATTCGCAGTTTCACTGTACCGG
CCGTGCGTACTTAGACATGCATGGCTTAATCTTTGAGACAAGCATATGCT
TGGCTTAATCTTTGAGACAAGCATATGCTACTGGCAGGATCAACCAGGTA
GACAAACCCTTGTGTCGAGGGCTGACTTTCAATAGATCGCAGCGAGGGAG
CTGCTCTGCTACGTACGAAACCCCGACCCAGAAGCAGGTCGTCTACGAAT
GGTTTAGCGCCAGGTTCCCCACGAACGTGCGGTGCGTGACGGGCGAGGG
GCGGCCGCCTTTCCGGCCGCGCCCCGTTTCCCAGGACGAAGGGCACTCCG
CACCGGACCCCGGTCCCGGCGCGCGGCGGGGCACGCGCCCTCCCGCGGCG
GGGCGCGTGGAGGGGIGGGCGGCCCGCCGGCGGGGACAGGCGGGGGACCG
GCTATCCGAGGCCAACCGAGGCTCCGCGGCGCTGCCGTATCGTTCGCCTG
GGCGGGATTCTGACTTAGAGGCGTTCAGTCATAATCCCACAGATGGTAGC
TTCGCCCCATTGGCTCCTCAGCCAAGCACATACACCAAATGTCTGAACCT
GCGGTTCCTCTCGTACTGAGCAGGATTACCATGGCAACAACACATCATCA
GTAGGGTAAAACTAACCTGTCTCACGACGGTCTAAACCCAGCTCACGTTC
CCTATTAGTGGGTGAACAATCCAACGCTTGGCGAATTCTGCTTCACAATG
ATAGGAAGAGCCGACATCGAAGGATCAAAAAGCGACGTCGCTATGAACGC
TTGGCCGCCACAAGCCAGTTATCCCTGTGGTAACTTTTCTGACACCTCCT
GCTTAAAACCCAAAAGGTCAGAAGGATCGTGAGGCCCCGCTTTCACGGTC
TGTATTCGTACTGAAAATCAAGATCAAGCGAGCTTTTGCCCTTCTGCTCC
ACGGGAGGTTTCTGTCCTCCCTGAGCTCGCCTTAGGACACCTGCGTTACC
GTTTGACAGGTGTACCGCCCCAGTCAAACTCCCCACCTGGCACTGTCCCC
GGAGCGGGTCGCGCCCGGCCGGGCGGGCGCTTGGCGCCAGAAGCGAGAGC
CCCTCGGGCTCGCCCCCCCGCCTCACCGGGTCAGTGAAAAAACGATCAGA
GTAGTGGTATTTCACCGGCGGCCCGCAGGGCCGCGGACCCCGCCCCGGGC
CCCTCGCGGGGACACCGGGIGGGCGCCGGGGGCCTCCCACTTATTCTACA
CCTCTCATGTCTCTTCACCGTGCCAGACTAGAGTCAAGCTCAACAGGGTC
TTCTTTCCCCGCTGATTCCGCCAAGCCCGTTCCCTTGGCTGTGGTTTCGC
TGGATAGTAGGTAGGGACAGTGGGAATCTCGTTCATCCATTCATGCGCGT
CACTAATTAGATGACGAGGCATTTGGCTACCTTAAGAGAGTCATAGTTAC
TCCCGCCGTTTACCCGCGCTTCATTGAATTTCTTCACTTTGACATTCAGA
GCACTGGGCAGAAATCACATCGCGTCAACACCCGCCGCGGGCCTTCGCGA
TGCTTTGTTTTAATTAAACAGTCGGATTCCCCTGGTCCGCACCAGTTCTA
AGTCGGCTGCTAGGCGCCGGCCGAGGCGAGGCGCGCGCGGAACCGCGGCC
CCGGGGGCGGACCCGGCGGGIGGGACCGGCCCGCGGCCCCTCCGCCGCCT
GCCGCCGCCGCCGCCGCGCGCCGAGGAGGAGGGGGGAACGGGGGGCGGAC
GGGCCGGGIGGGTAGGGCGGGGGGACGAACCGCCCCGCCCCGCCGCCCG
CCGACCGCCGCCGCCCGACCGCTCCCGCCCCCAGCGGACGCGCGCGCGAC
CGAGACGTGGGGTGGGGGTGGGGGGCGCGCCGCGCCGCCGCCGGGCTCCC
CGGGGGCGGCCGCGACGCCCGCCGCAGCTGGGGCGATCCACGGGAAGGGC
CCGGCTCGCGTCCAGAGTCCGCGCCGCCGCCGGCCCCCCGGGTCCCCGGG
GCCCCCCTCGCGGGGACCTGCCCCCGCCGGCCGCCCCGGCGGCCGCCGCG
CGGCCCCTGCCGCCCCGACCCTTCTCCCCCCGCCGCGCCCCCACGCGGCG
CTCCCCCGGGGAGGGGGGAGGACGGGGAGCGGGGGAGAGAGAGAGAGAGA
GGGCGCGGGGTGGGGAGGGAGCGAGCGGCGCGCGCGGGTGGGGCGGGGGA
GGGCCGCGAGGGGGGTGCCCCGGGCGTGGGGIGGGCGCGCGCCTCGTCCA
GCCGCGGCGCGCGCCCAGCCCCGCTTCGCGCCCCAGCCCGACCGACCCAG
CCCTTAGAGCCAATCCTTATCCCGAAGTTACGGATCCGGCTTGCCGACTT
CCCTTACCTACATTGTTCCAACATGCCAGAGGCTGTTCACCTTGGAGACC
TGCTGCGGATATGGGTACGGCCCGGCGCGAGATTTACACCCTCTCCCCCG
GATTTTCAAGGGCCAGCGAGAGCTCACCGGACGCCGCCGGAACCGCGACG
CTTTCCAAGGCACGGGCCCCTCTCTCGGGGCGAACCCATTCCAGGGCGCC
CTGCCCTTCACAAAGAAAAGAGAACTCTCCCCGGGGCTCCCGCCGGCTTC
TCCGGGATCGGTCGCGTTACCGCACTGGACGCCTCGCGGCGCCCATCTCC
GCCACTCCGGATTCGGGGATCTGAACCCGACTCCCTTTCGATCGGCCGAG
GGCAACGGAGGCCATCGCCCGTCCCTTCGGAACGGCGCTCGCCCATCTCT
CAGGACCGACTGACCCATGTTCAACTGCTGTTCACATGGAACCCTTCTCC
ACTTCGGCCTTCAAAGTTCTCGTTTGAATATTTGCTACTACCACCAAGAT
CTGCACCTGCGGCGGCTCCACCCGGGCCCGCGCCCTAGGCTTCAAGGCTC
ACCGCAGCGGCCCTCCTACTCGTCGCGGCGTAGCGTCCGCGGGGCTCCGG
GGGCGGGGAGCGGGGCGTGGGCGGGAGGAGGGGAGGAGGCGTGGG
GGGCGGGGGAAGGACCCCACACCCCCGCCGCCGCCGCCGCCGCCGCCCTC
CGACGCACACCACACGCGCGCGCGCGCGCGCCGCCCCCGCCGCTCCCGTC
CACTCTCGACTGCCGGCGACGGCCGGGTATGGGCCCGACGCTCCAGCGCC
ATCCATTTTCAGGGCTAGTTGATTCGGCAGGTGAGTTGTTACACACTCCT
TAGCGGATTCCGACTTCCATGGCCACCGTCCTGCTGTCTATATCAACCAA
CACCTTTTCTGGGGTCTGATGAGCGTCGGCATCGGGCGCCTTAACCCGGC
GTTCGGTTCATCCCGCAGCGCCAGTTCTGCTTACCAAAAGTGGCCCACTA
GGCACTCGCATTCCACGCCCGGCTCCACGCCAGCGAGCCGGGCTTCTTAC
CCATTTAAAGTTTGAGAATAGGTTGAGATCGTTTCGGCCCCAAGACCTCT
AATCATTCGCTTTACCGGATAAAACTGCGTGGCGGGGGTGCGTCGGGTCT
GCGAGAGCGCCAGCTATCCTGAGGGAAACTTCGGAGGGAACCAGCTACTA
GATGGTTCGATTAGTCTTTCGCCCCTATACCCAGGTCGGACGACCGATTT
GCACGTCAGGACCGCTACGGACCTCCACCAGAGTTTCCTCTGGCTTCGCC
CTGCCCAGGCATAGTTCACCATCTTTCGGGTCCTAACACGTGCGCTCGTG
CTCCACCTCCCCGGCGCGGCGGGCGAGACGGGCCGGTGGTGCGCCCTCGG
CGGACTGGAGAGGCCTCGGGATCCCACCTCGGCCGGCGAGCGCGCCGGCC
TTCACCTTCATTGCGCCACGGCGGCTTTCGTGCGAGCCCCCGACTCGCGC
ACGTGTTAGACTCCTTGGTCCGTGTTTCAAGACGGGTCGGGTGGGTAGCC
GACGTCGCCGCCGACCCCGTGCGCTCGCTCCGCCGTCCCCCTCTTCGGG
GACGCGCGCGTGGCCCCGAGAGAACCTCCCCCGGGCCCGACGGCGCGACC
CGCCCGGGGCGCACTGGGGACAGTCCGCCCCGCCCCCCGACCCGCGCGCG
GCACCCCCCCCGTCGCCGGGGCGGGGGCGCGGGGAGGAGGGGTGGGAGAG
CGGTCGCGCCGTGGGAGGGGTGGCCCGGCCCCCCCACGAGGAGACGCCGG
CGCGCCCCCGCGGGGGAGACCCCCCTCGCGGGGGATTCCCCGCGGGGGTG
GGCGCCGGGAGGGGGGAGAGCGCGGCGACGGGTCTCGCTCCCTCGGCCCC
GGGATTCGGCGAGTGCTGCTGCCGGGGGGGCTGTAACACTCGGGGIGGGT
TTCGGTCCCGCCGCCCCCGCCGCCGCCGCCACCGCCGCCGCCGCCGCCGC
CCCGACCCGCGCGCCCTCCCGAGGGAGGACGCGGGGCCGGGGGGCGGAGA
CGGGGGAGGAGGAGGACGGACGGACGGACGGGGCCCCCCGAGCCACCTTC
CCCGCCGGGCCTTCCCAGCCGTCCCGGAGCCGGTCGCGGCGCACCGCCGC
GGTGGAAATGCGCCCGGCGGCGGCCGGTCGCCGGTCGGGGGACGGTCCCC
CGCCGACCCCACCCCCGGCCCCGCCCGCCCACCCCCGCACCCGCCGGAGC
CCGCCCCCTCCGGGGAGGAGGAGGAGGGGCGGCGGGGGAAGGGAGGGCGG
GTGGAGGGGTCGGGAGGAACGGGGGGCGGGAAAGATCCGCCGGGCCGCCG
ACACGGCCGGACCCGCCGCCGGGTTGAATCCTCCGGGCGGACTGCGCGGA
CCCCACCCGTTTACCTCTTAACGGTTTCACGCCCTCTTGAACTCTCTCTT
CAAAGTTCTTTTCAACTTTCCCTTACGGTACTTGTTGACTATCGGTCTCG
TGCCGGTATTTAGCCTTAGATGGAGTTTACCACCCGCTTTGGGCTGCATT
CCCAAGCAACCCGACTCCGGGAAGACCCGGGCGCGCGCCGGCCGCTACCG
GCCTCACACCGTCCACGGGCTGGGCCTCGATCAGAAGGACTTGGGCCCCC
CACGAGCGGCGCCGGGGAGCGGGTCTTCCGTACGCCACATGTCCCGCGCC
CCGCGGGGCGGGGATTCGGCGCTGGGCTCTTCCCTGTTCACTCGCCGTTA
CTGAGGGAATCCTGGTTAGTTTCTTTTCCTCCGCTGACTAATATGCTTAA
GACTAATATGCTTAAATTCAGCGGGTCGCCACGTCTGATCTGAGGTCGCG
AAGCGACGCTCAGACAGGCGTAGCCCCGGGAGGAACCCGGGGCCGCAAGT
GCGTTCGAAGTGTCGATGATCAATGTGTCCTGCAATTCACATTAATTCTC
GCAGCTAGCTGCGTTCTTCATCGACGCACGAGCCGAGTGATCCACCGCTA
AAACCCTGTTCTTGGGTGGGTGTGGGTATAATACTAAGTTGAGATGATAT
CATTTACGGGGGAAGGCGCTTTGTGAAGTAGGCCTTATTTCTCTTGTCCT
TTCGTACAGGGAGGAATTTGAANGTAGATAGAAACCGACCTGGATTACTC
CGGTCTGAACTCAGATCACGTAGGACTTTAATCGTTGAACAAACGAACCT
TTAATAGCGGCTGCACCATCGGGATGTCCTGATCCAACATCGAGGTCGTA
AACCCTATTGTTGATATGGACTCTAGAATAGGATTGCGCTGTTATCCCTA
GGGTAACTTGTTCCGTTGGTCAAGTTATTGGATCAATTGAGTATAGTAGT
TCGCTTTGACTGGTGAAGTCTTAGCATGTACTGCTCGGAGGTTGGGTTCT
GCTCCGAGGTCGCCCCAACCGAAATTTTTAATGCAGGTTTGGTAGTTTAG
GACCTGTGGGTTTGTTAGGTACTGTTTGCATTAATAAATTAAAGCTCCAT
AGGGTCTTCTCGTCTTGCTGTGTTATGCCCGCCTCTTCACGGGCAGGTCA
ATTTCACTGGTTAAAAGTAAGAGACAGCTGAACCCTCGTGGAGCCATTCA
TACAGGTCCCTATTTAAGGAACAAGTGATTATGCTACCTTTGCACGGTTA
GGGTACCGCGGCCGTTAAACATGTGTCACTGGGCAGGCGGTGCCTCTAAT
ACTGGTGATGCTAGAGGTGATGTTTTTGGTAAACAGGCGGGGTAAGATTT
GCCGAGTTCCTTTTACTTTTTTTAACCTTTCCTTATGAGCATGCCTGTGT
TGGGTTGACAGTGAGGGTAATAATGACTTGTTGGTTGATTGTAGATATTG
GGCTGTTAATTGTCAGTTCAGTGTTTTAATCTGACGCAGGCTTATGCGGA
GGAGAATGTTTTCATGTTACTTATACTAACATTAGTTCTTCTATAGGGTG
ATAGATTGGTCCAATTGGGTGTGAGGAGTTCAGTTATATGTTTGGGATTT
TTTAGGTAGTGGGTGTTGAGCTTGAACGCTTTCTTAATTGGTGGCTGCTT
TTAGGCCTACTATGGGTGTTAAATTTTTTACTCTCTCTACAAGGTTTTTT
CCTAGTGTCCAAAGAGCTGTTCCTCTTTGGACTAACAGTTAAATTTACAA
GGGATTTAGAGGGTTCTGTGGGCAAATTTAAAGTTGAACTAAGATTCTA
TCTTGGACAACCAGCTATCACCAGGCTCGGTAGGTTTGTCGCCTCTACCT
ATAAATCTTCCCACTATTTTGCTACATAGACGGGTGTGCTCTTTTAGCTG
TTCTTAGGTAGCTCGTCTGGTTTCGGGGGTCTTAGCTTTGGCTCTCCTTG
CAAAGTTATTTCTAGTTAATTCATTATGCAGAAGGTATAGGGGTTAGTCC
TTGCTATATTATGCTTGGTTATAATTTTTCATCTTTCCCTTGCGGTACTA
TATCTATTGCGCCAGGTTTCAATTTCTATCGCCTATACTTTATTTGGGTA
AATGGTTTGGCTAAGGTTGTCTGGTAGTAAGGTGGAGTGGGTTTGGGGCT
GTTCGTCCAAGTGCACTTTCCAGTACACTTACCATGTTACGACTTGTCTC
CTCTATATAAATGCGTAGGGGTTTTAGTTAAATGTCCTTTGAAGTATACT
TGAGGAGGGTGACGGGCGGTGTGTACGCGCTTCAGGGCCCTGTTCAACTA
AGCACTCTACTCTTAGTTTACTGCTAAATCCACCTTCGACCCTTAAGTTT
CATAAGGGCTATCGTAGTTTTCTGGGGTAGAAAATGTAGCCCATTTCTTG
CCACCTCATGGGCTACACCTTGACCTAACGTCTTTACGTGGGTACTTGCG
CTTACTTTGTAGCCTTCATCAGGGTTTGCTGAAGATGGCGGTATATAGGC
TGAGCAAGAGGTGGTGAGGTTGATCGGGGTTTATCGATTACAGAACAGGC
TCCTCTAGAGGGATATGAAGCACCGCCAGGTCCTTTGAGTTTTAAGCTGT
GGCTCGTAGTGTTCTGGCGAGCAGTTTTGTTGATTTAACTGTTGAGGTTT
AGGGCTAAGCATAGTGGGGTATCTAATCCCAGTTTGGGTCTTAGCTATTG
TGTGTTCAGATATGTTAAAGCCACTTTCGTAGTCTATTTTGTGTCAACTG
GAGTTTTTTACAACTCAGGTGAGTTTTAGCTTTATTGGGGAGGGGGTGAT
CTAAAACACTCTTTACGCCGGCTTCTATTGACTTGGGTTAATCGTGTGAC
CGCGGTGGCTGGCACGAAATTGACCAACCCTGGGGTTAGTATAGCTTAGT
TAAACTTTCGTTTATTGCTAAAGGTTAATCACTGCTGTTTCCCGTGGG
TGTGGCTAGGCTAAGCGTTTTGAGCTGCATTGCTGCGTGCTTGATGCTTG
TTCCTTTTGATCGTGGTGATTTAGAGGGTGAACTCACTGGAACGGGGATG
CTTGCATGTGTAATCTTACTAAGAGCTAATAGAAAGGCTAGGACCAAACC
AAAGCCTACAGCACCCGGTATTCCCAGGCGGTCTCCCATCCAAGTACTAA
CCAGGCCCGACCCTGCTTAGCTTCCGAGATCAGACGAGATCGGGCGCGTT
TTCCGAGATCAGACGAGATCGGGCGCGTTCAGGGTGGTATGGCCGTAGAC
""".strip().split()
OLIGO_LENGTH = max(len(oligo) for oligo in OLIGO_LIBRARY)
ENCODED_OLIGO_LIBRARY = np.array([padded_encode(oligo, OLIGO_LENGTH) for oligo in OLIGO_LIBRARY])
